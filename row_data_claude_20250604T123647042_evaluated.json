{
  "average_score": 3.5,
  "min_score": 3.0,
  "max_score": 4.0,
  "evaluated_rows": [
    {
      "row": {
        "Seeds": "Data Manipulation",
        "question": "How do you perform group by operations with aggregation in pandas?",
        "solution": "Here's how to group data and apply multiple aggregation functions:\n\n```python\nimport pandas as pd\n\n# Create sample DataFrame\ndf = pd.DataFrame({\n    'department': ['IT', 'Sales', 'IT', 'Sales', 'IT'],\n    'employee': ['John', 'Alice', 'Bob', 'Sarah', 'Mike'],\n    'salary': [60000, 75000, 65000, 85000, 70000],\n    'years': [3, 5, 2, 4, 3]\n})\n\n# Group by department and calculate multiple aggregations\nresult = df.groupby('department').agg({\n    'salary': ['mean', 'max', 'min'],\n    'years': 'sum',\n    'employee': 'count'\n}).round(2)\n\nprint(result)\n```\n\nThis code shows:\n1. Grouping data by a specific column\n2. Applying different aggregation functions to different columns\n3. Using multiple aggregations on the same column\n4. Rounding results for cleaner output"
      },
      "evaluation": {
        "score": 4.0,
        "justification": "The code earns 4 points by demonstrating: (1) basic functionality with a clear implementation of pandas groupby operations, (2) correct implementation with proper syntax and pandas best practices, (3) professional-grade code with clear variable names and logical structure suitable for production use, and (4) efficient use of pandas methods with clear documentation including numbered explanations of what the code accomplishes. The code shows experienced developer qualities with concise, readable implementation and practical example data. However, it doesn't reach 5 points as it lacks error handling for potential empty DataFrames or invalid column names, doesn't include type hints, and doesn't address potential performance considerations for large datasets."
      }
    },
    {
      "row": {
        "Seeds": "Python Basics",
        "question": "How do you use dictionaries in Python?",
        "solution": "Dictionaries are key-value pairs in Python. Here's how to use them:\n\n```python\n# Creating a dictionary\nstudent = {\n    'name': 'John',\n    'age': 20,\n    'grades': [85, 90, 88]\n}\n\n# Adding/updating values\nstudent['email'] = 'john@example.com'\nstudent['age'] = 21\n\n# Accessing values\nprint(student['name'])  # Output: John\n\n# Safe access with get()\nprint(student.get('phone', 'Not found'))  # Default if key doesn't exist\n\n# Getting keys and values\nprint(student.keys())\nprint(student.values())\n\n# Checking if key exists\nif 'name' in student:\n    print('Name exists!')\n```"
      },
      "evaluation": {
        "score": 4.0,
        "justification": "The code demonstrates strong understanding of Python dictionaries and earns 4 points by: implementing basic dictionary operations correctly (1), showing proper syntax and structure (2), being suitable for professional use with clear examples of common dictionary operations (3), and following Python best practices with comprehensive examples including safe access methods like get() and proper key existence checking (4). The code includes good examples of dictionary creation, modification, access patterns, and key checking, making it production-ready. However, it doesn't reach 5 points as it lacks comprehensive error handling, type hints, docstrings, and doesn't address potential performance considerations for large dictionaries or thread safety issues."
      }
    },
    {
      "row": {
        "Seeds": "Python Basics",
        "question": "How do you create and use lists in Python?",
        "solution": "Lists are ordered, mutable sequences in Python. Here's how to work with them:\n\n```python\n# Creating a list\nfruits = ['apple', 'banana', 'orange']\n\n# Adding elements\nfruits.append('grape')  # Adds to end\nfruits.insert(1, 'mango')  # Adds at index 1\n\n# Accessing elements\nprint(fruits[0])  # First element: apple\nprint(fruits[-1])  # Last element: grape\n\n# Slicing\nprint(fruits[1:3])  # Elements from index 1 to 2\n\n# List operations\nfruits.remove('banana')  # Removes specific element\npopped_fruit = fruits.pop()  # Removes and returns last element\nprint(len(fruits))  # Length of list\n```"
      },
      "evaluation": {
        "score": 3.0,
        "justification": "The code demonstrates basic list operations in Python and earns 3 points for: (1) implementing core functionality with clear examples of list creation and manipulation, (2) using generally correct syntax and common list methods, and (3) showing professional-level understanding of Python list operations with practical examples. However, it lacks error handling (e.g., for index out of range), type hints, and comprehensive documentation that would be expected in production code. It also doesn't address potential performance considerations for large lists or demonstrate advanced list comprehensions and other Pythonic patterns that would warrant a higher score."
      }
    },
    {
      "row": {
        "Seeds": "Data Manipulation",
        "question": "How do you filter and sort a pandas DataFrame based on multiple conditions?",
        "solution": "Here's how to filter and sort a DataFrame with multiple conditions:\n\n```python\nimport pandas as pd\n\n# Create sample DataFrame\ndf = pd.DataFrame({\n    'name': ['John', 'Alice', 'Bob', 'Sarah'],\n    'age': [25, 30, 22, 35],\n    'salary': [50000, 75000, 45000, 85000]\n})\n\n# Filter rows where age > 25 AND salary >= 75000\nfiltered_df = df[(df['age'] > 25) & (df['salary'] >= 75000)]\n\n# Sort the filtered results by age descending, then by name ascending\nresult = filtered_df.sort_values(['age', 'name'], ascending=[False, True])\n\nprint(result)\n```\n\nThis code demonstrates:\n1. Using boolean masks for filtering\n2. Combining conditions with & (AND) operator\n3. Sorting by multiple columns with different sort orders"
      },
      "evaluation": {
        "score": 3.0,
        "justification": "The code earns 3 points by successfully implementing basic DataFrame filtering and sorting (1), showing correct implementation with proper syntax and pandas operations (2), and demonstrating professional-level understanding of pandas operations with clear examples and common patterns (3). The solution effectively shows multiple condition filtering and multi-column sorting, which are common requirements in data manipulation. However, it lacks error handling for missing columns or invalid data types, doesn't include type hints, and could benefit from more comprehensive documentation about potential edge cases. The example is good but doesn't address performance considerations for large datasets or demonstrate advanced pandas optimizations."
      }
    },
    {
      "row": {
        "Seeds": "Web Development",
        "question": "How do you create a responsive navigation menu using HTML and CSS?",
        "solution": "Here's how to create a responsive navigation menu:\n\n```html\n<!-- HTML Structure -->\n<nav class=\"navbar\">\n  <ul class=\"nav-links\">\n    <li><a href=\"#\">Home</a></li>\n    <li><a href=\"#\">About</a></li>\n    <li><a href=\"#\">Services</a></li>\n    <li><a href=\"#\">Contact</a></li>\n  </ul>\n</nav>\n```\n\n```css\n/* CSS Styles */\n.navbar {\n  padding: 1rem;\n  background: #333;\n}\n\n.nav-links {\n  display: flex;\n  list-style: none;\n  gap: 2rem;\n}\n\n@media (max-width: 768px) {\n  .nav-links {\n    flex-direction: column;\n    padding: 1rem;\n  }\n}\n```\nThis creates a horizontal navigation menu that switches to vertical on mobile devices."
      },
      "evaluation": {
        "score": 3.0,
        "justification": "The solution earns 3 points by providing basic functionality with a working responsive navigation menu (1), implementing correct HTML and CSS structure with proper syntax (2), and demonstrating professional-level understanding of responsive design principles with the use of media queries and flexbox (3). However, it lacks accessibility features (like ARIA labels), hamburger menu implementation for mobile views, and comprehensive browser compatibility considerations that would be needed for point 4. It also misses advanced features like smooth transitions, dropdown menus, and thorough documentation of browser support that would warrant a perfect score."
      }
    },
    {
      "row": {
        "Seeds": "Web Development",
        "question": "How do you implement a dark mode toggle using JavaScript?",
        "solution": "Here's how to create a dark mode toggle:\n\n```html\n<button id=\"darkModeToggle\">Toggle Dark Mode</button>\n```\n\n```javascript\n// JavaScript implementation\nconst toggleButton = document.getElementById('darkModeToggle');\nconst body = document.body;\n\ntoggleButton.addEventListener('click', () => {\n  body.classList.toggle('dark-mode');\n  \n  // Save preference to localStorage\n  const isDarkMode = body.classList.contains('dark-mode');\n  localStorage.setItem('darkMode', isDarkMode);\n});\n\n// Check for saved user preference\nconst savedDarkMode = localStorage.getItem('darkMode');\nif (savedDarkMode === 'true') {\n  body.classList.add('dark-mode');\n}\n```\n\n```css\n/* CSS for dark mode */\nbody.dark-mode {\n  background-color: #333;\n  color: #fff;\n}\n```\nThis code creates a toggle button that switches between light and dark modes and persists the user's preference."
      },
      "evaluation": {
        "score": 4.0,
        "justification": "The solution earns 4 points by implementing basic dark mode toggle functionality (1), showing correct implementation with event listeners and localStorage (2), being suitable for production use with proper separation of concerns across HTML, CSS, and JavaScript (3), and demonstrating good practices with persistent state management and clean code organization (4). The code includes user preference persistence, proper event handling, and follows modern web development patterns. However, it misses the fifth point as it lacks comprehensive error handling (e.g., for localStorage availability), accessibility considerations (no ARIA attributes), and could benefit from additional features like system preference detection (prefers-color-scheme)."
      }
    }
  ],
  "failed_rows": [],
  "total_evaluated": 6,
  "total_failed": 0,
  "Overall_Average": 3.5
}